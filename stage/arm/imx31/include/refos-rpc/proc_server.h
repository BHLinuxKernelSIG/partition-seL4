/* DO NOT EDIT MANUALLY!!!
   This file was generated by CIDL.

   Copyright 2014, NICTA

   This software may be distributed and modified according to the terms of
   the BSD 2-Clause license. Note that NO WARRANTY is provided.
   See "LICENSE_BSD2.txt" for details.

   @TAG(NICTA_BSD)
*/

#ifndef _RPC_INTERFACE_PROC_SERVER_H_
#define _RPC_INTERFACE_PROC_SERVER_H_

#include <refos-rpc/rpc.h>
#include <refos/refos.h>


/*! @file
    @brief Generated file for the proc interface. Please do NOT edit this file. */

#ifndef _RPC_PROC_LABEL_ENUMS_
#define _RPC_PROC_LABEL_ENUMS_
/*! @brief RPC syscall label enums for proc interface. */
enum rpc_proc_label_enum {
    RPC_PROC_LABEL_MIN = PROCSERV_METHODS_BASE,
    RPC_PROC_PORT_SAMPLING_CREATE,
    RPC_PROC_PORT_SAMPLING_WRITE,
    RPC_PROC_PORT_SAMPLING_READ,
    RPC_PROC_SET_PRIO,
    RPC_PROC_STOP_SELF,
    RPC_PROC_STOP,
    RPC_PROC_RESUME,
    RPC_PROC_GET_DEADLINE_FROM_PID,
    RPC_PROC_GET_CURRPRIO_FROM_PID,
    RPC_PROC_GET_STATUS_FROM_PID,
    RPC_PROC_GET_PERIOD_FROM_PID,
    RPC_PROC_GET_TIMECAP_FROM_PID,
    RPC_PROC_GET_ENTRYPOINT_FROM_PID,
    RPC_PROC_GET_STACKSIZE_FROM_PID,
    RPC_PROC_GET_BASEPRIO_FROM_PID,
    RPC_PROC_CURRENT_PARTITION_GET_ID,
    RPC_PROC_CURRENT_PARTITION_GET_PERIOD,
    RPC_PROC_CURRENT_PARTITION_GET_DURATION,
    RPC_PROC_CURRENT_PARTITION_GET_LOCK_LEVEL,
    RPC_PROC_CURRENT_PARTITION_GET_OPERATING_MODE,
    RPC_PROC_CURRENT_PARTITION_GET_START_CONDITION,
    RPC_PROC_GET_PID_FROM_NAME,
    RPC_PROC_GETPID,
    RPC_PROC_GET_HELLO_CPTR,
    RPC_PROC_GET_HELLO1_CPTR,
    RPC_PROC_GET_HELLO2_CPTR,
    RPC_PROC_GET_HELLO3_CPTR,
    RPC_PROC_GET_HELLO4_CPTR,
    RPC_PROC_GETPID2,
    RPC_PROC_PING,
    RPC_PROC_NEW_ENDPOINT_INTERNAL,
    RPC_PROC_NEW_ASYNC_ENDPOINT_INTERNAL,
    RPC_PROC_WATCH_CLIENT,
    RPC_PROC_UNWATCH_CLIENT,
    RPC_PROC_CREATE_MEM_WINDOW_INTERNAL,
    RPC_PROC_RESIZE_MEM_WINDOW,
    RPC_PROC_DELETE_MEM_WINDOW,
    RPC_PROC_GET_MEM_WINDOW,
    RPC_PROC_GET_MEM_WINDOW_DSPACE,
    RPC_PROC_REGISTER_AS_PAGER,
    RPC_PROC_UNREGISTER_AS_PAGER,
    RPC_PROC_NOTIFICATION_BUFFER,
    RPC_PROC_WINDOW_MAP,
    RPC_PROC_WINDOW_UNMAP,
    RPC_PROC_WINDOW_GETID,
    RPC_PROC_SET_PARAMBUFFER,
    RPC_PROC_NEW_PROC,
    RPC_PROC_EXIT,
    RPC_PROC_CLONE_INTERNAL,
    RPC_PROC_NICE,
    RPC_PROC_GET_IRQ_HANDLER,
    RPC_PROC_LABEL_MAX
};
#endif

void server_proc_port_sampling_create(void *rpc_userptr);
void reply_proc_port_sampling_create(void *rpc_userptr, int* rpc_id, int rpc___ret__);
extern int proc_port_sampling_create_handler(void *rpc_userptr , char * rpc_name , int rpc_size , int rpc_core , int rpc_period , int* rpc_id) __attribute__((weak));

void server_proc_port_sampling_write(void *rpc_userptr);
void reply_proc_port_sampling_write(void *rpc_userptr, int rpc___ret__);
extern int proc_port_sampling_write_handler(void *rpc_userptr , int rpc_id , void * rpc_addr , int rpc_len) __attribute__((weak));

void server_proc_port_sampling_read(void *rpc_userptr);
void reply_proc_port_sampling_read(void *rpc_userptr, int* rpc_len, int* rpc_valid, int rpc___ret__);
extern int proc_port_sampling_read_handler(void *rpc_userptr , int rpc_id , void * rpc_addr , int* rpc_len , int* rpc_valid) __attribute__((weak));

void server_proc_set_prio(void *rpc_userptr);
void reply_proc_set_prio(void *rpc_userptr, int rpc___ret__);
extern int proc_set_prio_handler(void *rpc_userptr , int rpc_pid , int rpc_prio) __attribute__((weak));

void server_proc_stop_self(void *rpc_userptr);
void reply_proc_stop_self(void *rpc_userptr, int rpc___ret__);
extern int proc_stop_self_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_stop(void *rpc_userptr);
void reply_proc_stop(void *rpc_userptr, int rpc___ret__);
extern int proc_stop_handler(void *rpc_userptr , int rpc_pid) __attribute__((weak));

void server_proc_resume(void *rpc_userptr);
void reply_proc_resume(void *rpc_userptr, int rpc___ret__);
extern int proc_resume_handler(void *rpc_userptr , int rpc_pid) __attribute__((weak));

void server_proc_get_deadline_from_pid(void *rpc_userptr);
void reply_proc_get_deadline_from_pid(void *rpc_userptr, int rpc___ret__);
extern int proc_get_deadline_from_pid_handler(void *rpc_userptr , int rpc_pid) __attribute__((weak));

void server_proc_get_currprio_from_pid(void *rpc_userptr);
void reply_proc_get_currprio_from_pid(void *rpc_userptr, int rpc___ret__);
extern int proc_get_currprio_from_pid_handler(void *rpc_userptr , int rpc_pid) __attribute__((weak));

void server_proc_get_status_from_pid(void *rpc_userptr);
void reply_proc_get_status_from_pid(void *rpc_userptr, int rpc___ret__);
extern int proc_get_status_from_pid_handler(void *rpc_userptr , int rpc_pid) __attribute__((weak));

void server_proc_get_period_from_pid(void *rpc_userptr);
void reply_proc_get_period_from_pid(void *rpc_userptr, int rpc___ret__);
extern int proc_get_period_from_pid_handler(void *rpc_userptr , int rpc_pid) __attribute__((weak));

void server_proc_get_timecap_from_pid(void *rpc_userptr);
void reply_proc_get_timecap_from_pid(void *rpc_userptr, int rpc___ret__);
extern int proc_get_timecap_from_pid_handler(void *rpc_userptr , int rpc_pid) __attribute__((weak));

void server_proc_get_entrypoint_from_pid(void *rpc_userptr);
void reply_proc_get_entrypoint_from_pid(void *rpc_userptr, int rpc___ret__);
extern int proc_get_entrypoint_from_pid_handler(void *rpc_userptr , int rpc_pid) __attribute__((weak));

void server_proc_get_stacksize_from_pid(void *rpc_userptr);
void reply_proc_get_stacksize_from_pid(void *rpc_userptr, int rpc___ret__);
extern int proc_get_stacksize_from_pid_handler(void *rpc_userptr , int rpc_pid) __attribute__((weak));

void server_proc_get_baseprio_from_pid(void *rpc_userptr);
void reply_proc_get_baseprio_from_pid(void *rpc_userptr, int rpc___ret__);
extern int proc_get_baseprio_from_pid_handler(void *rpc_userptr , int rpc_pid) __attribute__((weak));

void server_proc_current_partition_get_id(void *rpc_userptr);
void reply_proc_current_partition_get_id(void *rpc_userptr, int rpc___ret__);
extern int proc_current_partition_get_id_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_current_partition_get_period(void *rpc_userptr);
void reply_proc_current_partition_get_period(void *rpc_userptr, int rpc___ret__);
extern int proc_current_partition_get_period_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_current_partition_get_duration(void *rpc_userptr);
void reply_proc_current_partition_get_duration(void *rpc_userptr, uint64_t rpc___ret__);
extern uint64_t proc_current_partition_get_duration_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_current_partition_get_lock_level(void *rpc_userptr);
void reply_proc_current_partition_get_lock_level(void *rpc_userptr, int rpc___ret__);
extern int proc_current_partition_get_lock_level_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_current_partition_get_operating_mode(void *rpc_userptr);
void reply_proc_current_partition_get_operating_mode(void *rpc_userptr, int rpc___ret__);
extern int proc_current_partition_get_operating_mode_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_current_partition_get_start_condition(void *rpc_userptr);
void reply_proc_current_partition_get_start_condition(void *rpc_userptr, int rpc___ret__);
extern int proc_current_partition_get_start_condition_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_get_pid_from_name(void *rpc_userptr);
void reply_proc_get_pid_from_name(void *rpc_userptr, int rpc___ret__);
extern int proc_get_pid_from_name_handler(void *rpc_userptr , char* rpc_name) __attribute__((weak));

void server_proc_getpid(void *rpc_userptr);
void reply_proc_getpid(void *rpc_userptr, int rpc___ret__);
extern int proc_getpid_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_get_hello_cptr(void *rpc_userptr);
void reply_proc_get_hello_cptr(void *rpc_userptr, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_get_hello_cptr_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_get_hello1_cptr(void *rpc_userptr);
void reply_proc_get_hello1_cptr(void *rpc_userptr, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_get_hello1_cptr_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_get_hello2_cptr(void *rpc_userptr);
void reply_proc_get_hello2_cptr(void *rpc_userptr, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_get_hello2_cptr_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_get_hello3_cptr(void *rpc_userptr);
void reply_proc_get_hello3_cptr(void *rpc_userptr, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_get_hello3_cptr_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_get_hello4_cptr(void *rpc_userptr);
void reply_proc_get_hello4_cptr(void *rpc_userptr, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_get_hello4_cptr_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_getpid2(void *rpc_userptr);
void reply_proc_getpid2(void *rpc_userptr, int* rpc_pid, int rpc___ret__);
extern int proc_getpid2_handler(void *rpc_userptr , int* rpc_pid) __attribute__((weak));

void server_proc_ping(void *rpc_userptr);
void reply_proc_ping(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_ping_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_new_endpoint_internal(void *rpc_userptr);
void reply_proc_new_endpoint_internal(void *rpc_userptr, refos_err_t* rpc_errno, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_new_endpoint_internal_handler(void *rpc_userptr , refos_err_t* rpc_errno) __attribute__((weak));

void server_proc_new_async_endpoint_internal(void *rpc_userptr);
void reply_proc_new_async_endpoint_internal(void *rpc_userptr, refos_err_t* rpc_errno, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_new_async_endpoint_internal_handler(void *rpc_userptr , refos_err_t* rpc_errno) __attribute__((weak));

void server_proc_watch_client(void *rpc_userptr);
void reply_proc_watch_client(void *rpc_userptr, int32_t* rpc_deathID, refos_err_t rpc___ret__);
extern refos_err_t proc_watch_client_handler(void *rpc_userptr , seL4_CPtr rpc_liveness , seL4_CPtr rpc_deathEP , int32_t* rpc_deathID) __attribute__((weak));

void server_proc_unwatch_client(void *rpc_userptr);
void reply_proc_unwatch_client(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_unwatch_client_handler(void *rpc_userptr , seL4_CPtr rpc_liveness) __attribute__((weak));

void server_proc_create_mem_window_internal(void *rpc_userptr);
void reply_proc_create_mem_window_internal(void *rpc_userptr, refos_err_t* rpc_errno, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_create_mem_window_internal_handler(void *rpc_userptr , uint32_t rpc_vaddr , uint32_t rpc_size , uint32_t rpc_permissions , uint32_t rpc_flags , refos_err_t* rpc_errno) __attribute__((weak));

void server_proc_resize_mem_window(void *rpc_userptr);
void reply_proc_resize_mem_window(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_resize_mem_window_handler(void *rpc_userptr , seL4_CPtr rpc_window , uint32_t rpc_size) __attribute__((weak));

void server_proc_delete_mem_window(void *rpc_userptr);
void reply_proc_delete_mem_window(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_delete_mem_window_handler(void *rpc_userptr , seL4_CPtr rpc_window) __attribute__((weak));

void server_proc_get_mem_window(void *rpc_userptr);
void reply_proc_get_mem_window(void *rpc_userptr, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_get_mem_window_handler(void *rpc_userptr , uint32_t rpc_vaddr) __attribute__((weak));

void server_proc_get_mem_window_dspace(void *rpc_userptr);
void reply_proc_get_mem_window_dspace(void *rpc_userptr, refos_err_t* rpc_errno, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_get_mem_window_dspace_handler(void *rpc_userptr , seL4_CPtr rpc_window , refos_err_t* rpc_errno) __attribute__((weak));

void server_proc_register_as_pager(void *rpc_userptr);
void reply_proc_register_as_pager(void *rpc_userptr, seL4_Word* rpc_winID, refos_err_t rpc___ret__);
extern refos_err_t proc_register_as_pager_handler(void *rpc_userptr , seL4_CPtr rpc_window , seL4_CPtr rpc_faultNotifyEP , seL4_Word* rpc_winID) __attribute__((weak));

void server_proc_unregister_as_pager(void *rpc_userptr);
void reply_proc_unregister_as_pager(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_unregister_as_pager_handler(void *rpc_userptr , seL4_CPtr rpc_window) __attribute__((weak));

void server_proc_notification_buffer(void *rpc_userptr);
void reply_proc_notification_buffer(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_notification_buffer_handler(void *rpc_userptr , seL4_CPtr rpc_dataspace) __attribute__((weak));

void server_proc_window_map(void *rpc_userptr);
void reply_proc_window_map(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_window_map_handler(void *rpc_userptr , seL4_CPtr rpc_window , uint32_t rpc_windowOffset , uint32_t rpc_srcAddr) __attribute__((weak));

void server_proc_window_unmap(void *rpc_userptr);
void reply_proc_window_unmap(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_window_unmap_handler(void *rpc_userptr) __attribute__((weak));

void server_proc_window_getID(void *rpc_userptr);
void reply_proc_window_getID(void *rpc_userptr, int rpc___ret__);
extern int proc_window_getID_handler(void *rpc_userptr , seL4_CPtr rpc_window) __attribute__((weak));

void server_proc_set_parambuffer(void *rpc_userptr);
void reply_proc_set_parambuffer(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_set_parambuffer_handler(void *rpc_userptr , seL4_CPtr rpc_dataspace , uint32_t rpc_size) __attribute__((weak));

void server_proc_new_proc(void *rpc_userptr);
void reply_proc_new_proc(void *rpc_userptr, int32_t* rpc_status, refos_err_t rpc___ret__);
extern refos_err_t proc_new_proc_handler(void *rpc_userptr , char* rpc_name , char* rpc_params , bool rpc_block , int32_t rpc_priority , int32_t* rpc_status) __attribute__((weak));

void server_proc_exit(void *rpc_userptr);
void reply_proc_exit(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_exit_handler(void *rpc_userptr , int32_t rpc_status) __attribute__((weak));

void server_proc_clone_internal(void *rpc_userptr);
void reply_proc_clone_internal(void *rpc_userptr, refos_err_t* rpc_errno, int rpc___ret__);
extern int proc_clone_internal_handler(void *rpc_userptr , seL4_Word rpc_entryPoint , seL4_Word rpc_childStack , int rpc_flags , seL4_Word rpc_arg , refos_err_t* rpc_errno) __attribute__((weak));

void server_proc_nice(void *rpc_userptr);
void reply_proc_nice(void *rpc_userptr, refos_err_t rpc___ret__);
extern refos_err_t proc_nice_handler(void *rpc_userptr , int rpc_threadID , int rpc_priority) __attribute__((weak));

void server_proc_get_irq_handler(void *rpc_userptr);
void reply_proc_get_irq_handler(void *rpc_userptr, seL4_CPtr rpc___ret__);
extern seL4_CPtr proc_get_irq_handler_handler(void *rpc_userptr , int rpc_irq) __attribute__((weak));

#endif /* _RPC_INTERFACE_PROC_SERVER_H_ */

